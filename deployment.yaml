# --- Configuração do Banco de Dados (MongoDB) ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo:5.0 # Usando uma imagem oficial do MongoDB
          ports:
            - containerPort: 27017
---
# --- Serviço para o MongoDB ---
# Cria um "endereço" interno para que a API possa encontrar o MongoDB
apiVersion: v1
kind: Service
metadata:
  name: mongo-service # Este é o nome que a API usará para se conectar
spec:
  selector:
    app: mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

---
# --- Configuração da API (Backend) ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
spec:
  replicas: 1 # 1 pod para a API, como pedido
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
        - name: api
          # IMPORTANTE: Altere para o seu usuário do Docker Hub
          image: tavossx/estoque-api:latest
          ports:
            - containerPort: 5000
          env:
            - name: MONGO_URL # Variável de ambiente que sua API usa
              # O valor aponta para o serviço do MongoDB que criamos acima
              value: "mongodb://mongo-service:27017/Estoque"
---
# --- Serviço para a API ---
# Cria um "endereço" interno para que o Frontend possa encontrar a API
apiVersion: v1
kind: Service
metadata:
  name: api-service
spec:
  # 1. Mude o tipo para expor o serviço para fora
  type: NodePort
  selector:
    app: api
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
      # 2. Defina uma porta fixa para o acesso externo
      nodePort: 30002

---
# --- Configuração do Frontend ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  replicas: 2 # 2 pods para o Frontend, como pedido
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          # IMPORTANTE: Altere para o seu usuário do Docker Hub
          image: tavossx/estoque-frontend:latest
          ports:
            - containerPort: 80 # Porta do Nginx
---
# --- Serviço para o Frontend ---
# Expõe o Frontend para fora do cluster para que você possa acessá-lo no navegador
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  # O tipo NodePort expõe o serviço em uma porta estática em cada nó do cluster
  type: NodePort
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80 # Porta do serviço
      targetPort: 80 # Porta dos contêineres do frontend
      nodePort: 30001
